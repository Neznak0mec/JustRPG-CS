using Discord;
using Discord.WebSocket;
using JustRPG.Features;
using JustRPG.Models;
using JustRPG.Models.Enums;

namespace JustRPG.Generators;

public static class ButtonSets
{
    public static MessageComponent ProfileButtonsSet(string finder, string toFind, string currentButton = "Profile")
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–ü—Ä–æ—Ñ–∏–ª—å", customId: $"Profile_{finder}_{toFind}", disabled: currentButton == "Profile")
            .WithButton(label: "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", customId: $"Equipment_{finder}_{toFind}",
                disabled: currentButton == "Equipment")
            .WithButton(label: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", customId: $"Inventory_{finder}_{toFind}");

        return builder.Build();
    }

    public static MessageComponent InventoryButtonsSet(string finder, long userId, Inventory? inventory, Item?[] items)
    {
        IEmote emote = inventory.interactionType switch
        {
            "info" => Emoji.Parse(":identification_card:"),
            "destroy" => Emoji.Parse(":wastebasket:"),
            "sell" => Emoji.Parse(":scales:"),
            _ => Emoji.Parse(":shirt:")
        };

        ButtonStyle style = inventory.interactionType switch
        {
            "info" => ButtonStyle.Primary,
            "destroy" => ButtonStyle.Danger,
            _ => ButtonStyle.Success
        };


        var builder = new ComponentBuilder()
            .WithButton(label: "‚Üê", customId: $"Inventory|prewPage_{finder}_{userId}", row: 0)
            .WithButton(label: "‚Üë", customId: $"Inventory|prewItem_{finder}_{userId}", row: 0)
            .WithButton(emote: emote, customId: $"Inventory|interact_{finder}_{userId}", style: style, row: 0)
            .WithButton(label: "‚Üì", customId: $"Inventory|nextItem_{finder}_{userId}", row: 0)
            .WithButton(label: "‚Üí", customId: $"Inventory|nextPage_{finder}_{userId}", row: 0);

        if (inventory.showSortSelections)
        {
            var rarityOptions = new[]
            {
                "—Å–±—Ä–æ—Å",
                "–æ–±—ã—á–Ω–æ–µ",
                "–Ω–µ–æ–±—ã—á–Ω–æ–µ",
                "—Ä–µ–¥–∫–æ–µ",
                "—ç–ø–∏—á–µ—Å–∫–æ–µ",
                "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
            };

            var itemTypeOptions = new[]
            {
                "—Å–±—Ä–æ—Å",
                "—à–ª–µ–º",
                "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
                "–ø–µ—Ä—á–∞—Ç–∫–∏",
                "—à—Ç–∞–Ω—ã",
                "–±–æ—Ç–∏–Ω–∫–∏",
                "–æ—Ä—É–∂–∏–µ",
                "–∑–µ–ª—å—è"
            };

            var levelOptions = Enumerable.Range(1, 65)
                .GroupBy(x => (x - 1) / 5)
                .Select(g => new { range = $"{g.First()}-{g.Last()}" })
                .ToArray();

            var selectMenuLvl = new SelectMenuBuilder()
                .WithCustomId($"Inventory|byLvl_{finder}_{userId}")
                .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞")
                .WithOptions(levelOptions.Select(x =>
                    new SelectMenuOptionBuilder().WithLabel($"–£—Ä–æ–≤–µ–Ω—å {x.range}").WithValue($"{x.range}")).ToList());

            var selectMenuRaty = new SelectMenuBuilder()
                .WithCustomId($"Inventory|byRaty_{finder}_{userId}")
                .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞")
                .WithOptions(rarityOptions.Select(x =>
                    new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());

            var selectMenuType = new SelectMenuBuilder()
                .WithCustomId($"Inventory|byType_{finder}_{userId}")
                .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞")
                .WithOptions(itemTypeOptions.Select(x =>
                    new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());

            builder.WithSelectMenu(selectMenuLvl, row: 1)
                .WithSelectMenu(selectMenuRaty, row: 2)
                .WithSelectMenu(selectMenuType, row: 3);
        }
        else
        {
            var select = new SelectMenuBuilder()
                .WithPlaceholder(
                    $"–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {(inventory!.interactionType == "info" ? "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" : inventory.interactionType == "sell" ? "–ø—Ä–æ–¥–∞–∂–∞" : inventory.interactionType == "destroy" ? "—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å" : "—ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å")}")
                .WithCustomId($"Inventory|InteractionType_{finder}_{userId}")
                .AddOption("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info")
                .AddOption("–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å", "equip")
                .AddOption("–ü—Ä–æ–¥–∞—Ç—å", "sell")
                .AddOption("–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å", "destroy")
                .WithDisabled(finder != userId.ToString());

            builder.WithSelectMenu(select, row: 1);
        }


        builder
            .WithButton(emote: Emoji.Parse(":back:"), customId: $"Profile_{finder}_{userId}", row: 2)
            .WithButton(emote: Emoji.Parse(":tools:"), label: "üõí",
                customId: $"Inventory|OpenSlotsSettings_{finder}_{userId}", row: 2)
            .WithButton(emote: Emoji.Parse(":compression:"), customId: $"Inventory|SortMenu_{finder}_{userId}", row: 2)
            .WithButton(label: "‚ô∫", customId: $"Inventory|Reload_{finder}_{userId}", row: 2);

        return builder.Build();
    }

    public static MessageComponent SaleItemButtonsSet(long userid, string itemId)
    {
        ComponentBuilder builder =
            new ComponentBuilder().WithButton(label: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", $"Market|setPrice_{userid}_{itemId}");

        return builder.Build();
    }

    public static MessageComponent AcceptActions(string uid, long userId)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–î–∞", customId: $"Action|Accept_{userId}_{uid}", row: 0, style: ButtonStyle.Success)
            .WithButton(label: "–ù–µ—Ç", customId: $"Action|Denied_{userId}_{uid}", row: 0, style: ButtonStyle.Danger);

        return builder.Build();
    }

    public static MessageComponent SelectLocation(string type, long userId, List<Location> locations)
    {
        var select = new SelectMenuBuilder()
            .WithPlaceholder("–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è ?")
            .WithCustomId($"SelectLocation|{type}_{userId}");

        locations.Sort((x, y) => x.lvl - y.lvl);

        foreach (var i in locations)
        {
            select.AddOption($"{i.name} - {i.lvl}", i.id);
        }

        return new ComponentBuilder().WithSelectMenu(select).Build();
    }

    public static MessageComponent BattleButtonSet(Battle? battle, long userId, bool disableButtons = false,
        bool disableSelectEnemy = false)
    {
        var builder = new ComponentBuilder()
            .WithButton(emote: Emoji.Parse(":dagger:"), customId: $"Battle|Attack_{userId}_{battle!.id}",
                disabled: disableButtons)
            .WithButton(emote: Emoji.Parse(":heavy_plus_sign:"), customId: $"Battle|Heal_{userId}_{battle.id}",
                disabled: disableButtons,
                style: ButtonStyle.Success)
            .WithButton(emote: Emoji.Parse(":person_running:"), customId: $"Battle|Run_{userId}_{battle.id}",
                disabled: disableButtons || battle.type == BattleType.arena,
                style: ButtonStyle.Danger);

        if (battle.type == BattleType.dungeon)
        {
            SelectMenuBuilder select = new SelectMenuBuilder()
                .WithPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
                .WithCustomId($"Battle|SelectEnemy_{userId}_{battle.id}");

            for (int i = 0; i < battle.enemies.Length; i++)
            {
                var temp = SecondaryFunctions.WarriorToStatusString(battle.enemies[i], i == battle.selectedEnemy);
                select.AddOption(label: $"{i + 1} - {battle.enemies[i].name}", value: $"{i}", description: temp.Item2,
                    emote: new Emoji(temp.Item1));
            }

            select.IsDisabled = disableSelectEnemy || disableButtons;

            builder.WithSelectMenu(select);
        }

        return builder.Build();
    }

    public static MessageComponent CancelFindPvp(ulong userId)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–û—Ç–º–µ–Ω–∞", customId: $"FindPvp|Cancel_{userId}", style: ButtonStyle.Danger);

        return builder.Build();
    }

    public static MessageComponent MarketSortComponents(ulong userId, string interactionId)
    {
        var rarityOptions = new[]
        {
            "—Å–±—Ä–æ—Å",
            "–æ–±—ã—á–Ω–æ–µ",
            "–Ω–µ–æ–±—ã—á–Ω–æ–µ",
            "—Ä–µ–¥–∫–æ–µ",
            "—ç–ø–∏—á–µ—Å–∫–æ–µ",
            "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
        };

        var itemTypeOptions = new[]
        {
            "—Å–±—Ä–æ—Å",
            "—à–ª–µ–º",
            "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            "–ø–µ—Ä—á–∞—Ç–∫–∏",
            "—à—Ç–∞–Ω—ã",
            "–±–æ—Ç–∏–Ω–∫–∏",
            "–æ—Ä—É–∂–∏–µ",
            "–∑–µ–ª—å—è"
        };

        var levelOptions = Enumerable.Range(1, 65)
            .GroupBy(x => (x - 1) / 5)
            .Select(g => new { range = $"{g.First()}-{g.Last()}" })
            .ToArray();


        var selectMenuLvl = new SelectMenuBuilder()
            .WithCustomId($"MarketSort|byLvl_{userId}")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(levelOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel($"–£—Ä–æ–≤–µ–Ω—å {x.range}").WithValue($"{x.range}")).ToList());

        var selectMenuRaty = new SelectMenuBuilder()
            .WithCustomId($"MarketSort|byRaty_{userId}")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(rarityOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());

        var selectMenuType = new SelectMenuBuilder()
            .WithCustomId($"MarketSort|byType_{userId}")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(itemTypeOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());


        var builder = new ComponentBuilder()
            .WithButton(label: "‚Üê", customId: $"MarketSort|prewPage_{userId}", row: 0)
            .WithButton(label: "‚Üë", customId: $"MarketSort|prewItem_{userId}", row: 0)
            .WithButton(emote: Emoji.Parse(":shopping_cart:"), customId: $"MarketSort|buyItem_{userId}", row: 0)
            .WithButton(label: "‚Üì", customId: $"MarketSort|nextItem_{userId}", row: 0)
            .WithButton(label: "‚Üí", customId: $"MarketSort|nextPage_{userId}", row: 0)
            .WithSelectMenu(selectMenuLvl, row: 1)
            .WithSelectMenu(selectMenuRaty, row: 2)
            .WithSelectMenu(selectMenuType, row: 3)
            .WithButton(emote: Emoji.Parse(":repeat:"), customId: $"MarketSort|reloadPage_{userId}", row: 4)
            .WithButton(emote: Emoji.Parse("üîç"), customId: $"MarketSort|search_{userId}", row: 4, disabled: true)
            .WithButton(emote: Emote.Parse("<:silver:997889161484828826>"), label: "‚Üë",
                customId: $"MarketSort|priceUp_{userId}", row: 4)
            .WithButton(emote: Emote.Parse("<:silver:997889161484828826>"), label: "‚Üì",
                customId: $"MarketSort|priceDown_{userId}", row: 4)
            .WithButton(emote: Emoji.Parse(":tools:"), customId: $"MarketSort|openSlotsSettings_{userId}", row: 4);


        return builder.Build();
    }

    public static MessageComponent MarketSettingComponents(MarketSlotsSettings settings)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "‚Üë", customId: $"Market|prewItem_{settings.userId}", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(label: "‚Üì", customId: $"Market|nextItem_{settings.userId}", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":money_with_wings:"), customId: $"Market|updatePrice_{settings.userId}",
                row: 0, disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":eye:"), customId: $"Market|editVisible_{settings.userId}", style:
                (settings.searchResults.Count == 0 ? ButtonStyle.Success :
                    settings.searchResults[settings.currentItemIndex].isVisible ? ButtonStyle.Success :
                    ButtonStyle.Danger)
                , row: 0, disabled: settings.searchResults.Count == 0)
            .WithButton(label: "–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", customId: $"Market|Remove_{settings.userId}", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":repeat:"), customId: $"Market|reloadPage_{settings.userId}", row: 1)
            .WithButton(label: "–ù–∞–∑–∞–¥", customId: $"Market|goBack_{settings.userId}", row: 1);

        return builder.Build();
    }

    public static MessageComponent GuildComponents(Guild guild, ulong userId)
    {
        var builder = new ComponentBuilder();

        GuildMember? member = guild.members.FirstOrDefault(x => x.user == (long)userId);
        if (member == null)
        {
            builder.WithButton(label: "–£—á–∞—Å—Ç–Ω–∏–∫–∏", $"Guild|Members_{userId}_{guild.tag}");
            switch (guild.join_type)
            {
                case JoinType.open:
                    builder.WithButton("–í—Å—Ç—É–ø–∏—Ç—å", $"Guild|Join_{userId}_{guild.tag}");
                    break;
                case JoinType.invite:
                    builder.WithButton("–ó–∞—è–≤–∫–∞", $"Guild|Join_{userId}_{guild.tag}");
                    break;
                default:
                    builder.WithButton("–í—Å—Ç—É–ø–∏—Ç—å", $"Guild|Join_{userId}_{guild.tag}", disabled: true);
                    break;
            }
        }
        else
            switch (member.rank)
            {
                case GuildRank.warrior:
                    builder.WithButton("–£—á–∞—Å—Ç–Ω–∏–∫–∏", $"Guild|Members_{userId}_{guild.tag}")
                        .WithButton("–í—ã–π—Ç–∏", $"Guild|Leave_{userId}_{guild.tag}", style: ButtonStyle.Danger);
                    break;
                case GuildRank.officer:
                    builder.WithButton("–£—á–∞—Å—Ç–Ω–∏–∫–∏", $"Guild|Members_{userId}_{guild.tag}")
                        .WithButton("–ó–∞—è–≤–∫–∏", $"Guild|Applications_{userId}_{guild.tag}",
                            disabled: guild.join_type != JoinType.invite)
                        .WithButton("–í—ã–π—Ç–∏", $"Guild|Leave_{userId}_{guild.tag}", style: ButtonStyle.Danger);
                    break;
                default:
                    builder.WithButton("–£—á–∞—Å—Ç–Ω–∏–∫–∏", $"Guild|Members_{userId}_{guild.tag}")
                        .WithButton("–ó–∞—è–≤–∫–∏", $"Guild|Applications_{userId}_{guild.tag}")
                        .WithButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", $"Guild|Settings_{userId}_{guild.tag}");
                    break;
            }

        return builder.Build();
    }

    public static MessageComponent GuildMembers(Guild guild, ulong userId, DiscordSocketClient bot)
    {
        var builder = new ComponentBuilder();

        builder.WithButton("–ì–ª–∞–≤–Ω–∞—è", $"Guild_{userId}_{guild.tag}");

        GuildMember? member = guild.members.FirstOrDefault(x => x.user == (long)userId);
        if (member is { rank: GuildRank.officer or GuildRank.owner })
        {
            builder.WithButton("–ö–∏–∫–Ω—É—Ç—å", customId: $"Guild|Kick_{userId}_{guild.tag}");
        }

        if (member is { rank: GuildRank.owner })
        {
            builder.WithButton("–û—Ñ—Ñ–∏—Ü–µ—Ä", customId: $"Guild|Officer_{userId}_{guild.tag}");
        }

        return builder.Build();
    }

    public static MessageComponent GuildSettings(Guild guild, ulong userId)
    {
        var builder = new ComponentBuilder();


        var selectMenuType = new SelectMenuBuilder()
            .WithCustomId($"Guild|joinType_{userId}_{guild.tag}")
            .WithPlaceholder("–¢–∏–ø –≤—Ö–æ–¥–∞");

        selectMenuType.AddOption(new SelectMenuOptionBuilder().WithLabel("–û—Ç–∫—Ä—ã—Ç—ã–π").WithValue("open"));
        selectMenuType.AddOption(new SelectMenuOptionBuilder().WithLabel("–ü–æ –∏–Ω–≤–∞–π—Ç–∞–º").WithValue("invite"));
        selectMenuType.AddOption(new SelectMenuOptionBuilder().WithLabel("–ó–∞–∫—Ä—ã—Ç").WithValue("closed"));


        builder
            .WithButton("–ì–ª–∞–≤–Ω–∞—è", $"Guild_{userId}_{guild.tag}")
            .WithButton("–ó–Ω–∞—á–æ–∫", $"Guild|EditSymbol_{userId}_{guild.tag}")
            .WithSelectMenu(selectMenuType);

        return builder.Build();
    }

    public static MessageComponent GuildApplications(Guild guild, ulong userId)
    {
        var builder = new ComponentBuilder();
        bool listIsEmpty = guild.wantJoin.Count == 0;

        builder.WithButton("–ì–ª–∞–≤–Ω–∞—è", $"Guild_{userId}_{guild.tag}")
            .WithButton("–ü—Ä–∏–Ω—è—Ç—å", $"Guild|Accept_{userId}_{guild.tag}", disabled: listIsEmpty,
                style: ButtonStyle.Success)
            .WithButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", $"Guild|Denied_{userId}_{guild.tag}", disabled: listIsEmpty,
                style: ButtonStyle.Danger);


        return builder.Build();
    }

    public static MessageComponent GuildCreateComponents(ulong userId)
    {
        var builder = new ComponentBuilder();

        builder.WithButton("–°–æ–∑–¥–∞—Ç—å", $"Guild|Create_{userId}");

        return builder.Build();
    }

    public static MessageComponent SelectRewardsComponents(ulong userId, BattleResultDrop resultDrop,bool end = false)
    {
        var builder = new ComponentBuilder();

        builder.WithButton(label: "‚Üë", customId: $"SelectRewards|prewItem_{userId}_{resultDrop.id}", row: 0, disabled: end)
            .WithButton(emote: Emoji.Parse(":pushpin:"), customId: $"SelectRewards|Select_{userId}_{resultDrop.id}", row: 0, disabled: end)
            .WithButton(label: "‚Üì", customId: $"SelectRewards|nextItem_{userId}_{resultDrop.id}", row: 0, disabled: end)
            .WithButton(emote: Emoji.Parse(":heavy_check_mark:"), customId: $"SelectRewards|Complete_{userId}_{resultDrop.id}", row: 1,style: ButtonStyle.Success, disabled: end);
        
        return builder.Build();
    }

    public static MessageComponent StartSelectRewards(ulong userId)
    {
        var builder = new ComponentBuilder();

        builder.WithButton(emote: Emoji.Parse(":gem:"), customId: $"Battle|StartSelectReward_{userId}_a", style: ButtonStyle.Success);

        return builder.Build();
    }
}