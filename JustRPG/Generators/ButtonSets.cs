using Discord;
using JustRPG.Features;
using JustRPG.Models;

namespace JustRPG.Generators;

public static class ButtonSets
{
    public static MessageComponent ProfileButtonsSet(string finder, string toFind, string currentButton = "Profile")
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–ü—Ä–æ—Ñ–∏–ª—å", customId: $"Profile_{finder}_{toFind}", disabled: currentButton == "Profile")
            .WithButton(label: "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", customId: $"Equipment_{finder}_{toFind}",
                disabled: currentButton == "Equipment")
            .WithButton(label: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", customId: $"Inventory_{finder}_{toFind}")
            .WithButton(label: "–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤", customId: $"UpSkills_{finder}", disabled: finder != toFind, row: 1);

        return builder.Build();
    }

    public static MessageComponent UpUserSkills(string finder, User user)
    {
        int lvl = user.lvl;
        bool canUpSkills = user.skillPoints > 0;
        var builder = new ComponentBuilder()
            .WithButton(label: $"{user.stats.hp} - —Ö–ø", customId: "nothing", row: 0, disabled: true)
            .WithButton(label: $"{user.stats.defence} - –±—Ä–æ–Ω—è", customId: $"UpSkill_{finder}_defence", row: 0,
                disabled: user.stats.defence >= lvl || !canUpSkills)
            .WithButton(label: $"{user.stats.damage} - —É—Ä–æ–Ω", customId: $"UpSkill_{finder}_damage", row: 1,
                disabled: user.stats.damage >= lvl || !canUpSkills)
            .WithButton(label: $"{user.stats.speed} - –ª–æ–≤–∫–æ—Å—Ç—å", customId: $"UpSkill_{finder}_speed", row: 1,
                disabled: user.stats.speed >= lvl || !canUpSkills)
            .WithButton(label: $"{user.stats.luck} - —É–¥–∞—á–∞", customId: $"UpSkill_{finder}_luck", row: 2,
                disabled: user.stats.luck >= lvl || !canUpSkills)
            .WithButton(label: "–ö –ø—Ä–æ—Ñ–∏–ª—é", customId: $"Profile_{finder}_{finder}", row: 3, emote: Emoji.Parse("üîô"));

        return builder.Build();
    }

    public static MessageComponent InventoryButtonsSet(string finder, long userId, Inventory? inventory, Item?[] items)
    {
        var select = new SelectMenuBuilder()
            .WithPlaceholder(
                $"–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {(inventory!.interactionType == "info" ? "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" : inventory.interactionType == "sell" ? "–ø—Ä–æ–¥–∞–∂–∞" : inventory.interactionType == "destroy" ? "—É–Ω–∏—á—Ç–æ–∂—Ç—å" : "—ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å")}")
            .WithCustomId($"Inventary_{finder}_{userId}_InteractionType")
            .AddOption("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "info")
            .AddOption("–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å", "equip")
            .AddOption("–ü—Ä–æ–¥–∞—Ç—å", "sell")
            .AddOption("–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å", "destroy")
            .WithDisabled(finder != userId.ToString());

        var builder = new ComponentBuilder()
            .WithButton(label: "‚Æò", customId: $"Inventary_{finder}_{userId}_PrewPage",
                disabled: inventory.currentPage == 0, row: 0)
            .WithButton(label: $"{inventory.currentPage + 1}/{inventory.lastPage + 1}", customId: "null1",
                disabled: true, row: 0)
            .WithButton(label: "‚û£", customId: $"Inventary_{finder}_{userId}_NextPage",
                disabled: inventory.currentPage >= inventory.lastPage, row: 0)
            .WithButton(label: "‚ô∫", customId: $"Inventary_{finder}_{userId}_Reload")
            .WithSelectMenu(select, row: 1);

        ButtonStyle style;

        switch (inventory.interactionType)
        {
            case "info":
                style = ButtonStyle.Primary;
                break;
            case "destroy":
                style = ButtonStyle.Danger;
                break;
            default:
                style = ButtonStyle.Success;
                break;
        }


        for (int i = 0; i < items.Length; i++)
        {
            string customId;
            bool disabled = false;

            if (items[i] == null)
            {
                customId = $"null-{Guid.NewGuid()}";
                disabled = true;
            }
            else if (inventory.interactionType == "info" || finder == userId.ToString())
            {
                customId = $"Inventary_{finder}_{userId}_{inventory.interactionType}_{i}";
                ;

                if (inventory.interactionType == "equip")
                    disabled = !items[i]!.IsEquippable();
            }
            else
            {
                continue;
            }

            builder.WithButton(label: $"{i + 1}", customId: customId, style: style, disabled: disabled, row: 2);
        }

        builder.WithButton(label: "–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", customId: $"Equipment_{finder}_{userId}", row: 3)
            .WithButton(emote: Emoji.Parse(":tools:"), label: "üõí",
                customId: $"Inventary_{finder}_{userId}_OpenSlotsSettings", row: 3);

        return builder.Build();
    }

    public static MessageComponent AcceptActions(string uid, long userId)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–î–∞", customId: $"Action_{userId}_{uid}_Accept", row: 0, style: ButtonStyle.Success)
            .WithButton(label: "–ù–µ—Ç", customId: $"Action_{userId}_{uid}_Denied", row: 0, style: ButtonStyle.Danger);

        return builder.Build();
    }

    public static MessageComponent SelectLocation(string type, long userId, List<Location> locations)
    {
        var select = new SelectMenuBuilder()
            .WithPlaceholder("–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è ?")
            .WithCustomId($"SelectLocation_{userId}_{type}");

        locations.Sort((x, y) => x.lvl - y.lvl);

        foreach (var i in locations)
        {
            select.AddOption($"{i.name} - {i.lvl}", i.id);
        }

        return new ComponentBuilder().WithSelectMenu(select).Build();
    }

    public static MessageComponent BattleButtonSet(Battle? battle, long userId, bool disableButtons = false,
        bool disableSelectEnemy = false)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–ê—Ç–∞–∫–∞", customId: $"Battle_{userId}_Attack_{battle!.id}", disabled: disableButtons)
            .WithButton(label: "–•–∏–ª", customId: $"Battle_{userId}_Heal_{battle.id}", disabled: disableButtons,
                style: ButtonStyle.Success)
            .WithButton(label: "–ü–æ–±–µ–≥", customId: $"Battle_{userId}_Run_{battle.id}", disabled: disableButtons,
                style: ButtonStyle.Danger);

        if (battle.type == "dungeon")
        {
            SelectMenuBuilder select = new SelectMenuBuilder()
                .WithPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
                .WithCustomId($"Battle_{userId}_SelectEnemy_{battle.id}");

            for (int i = 0; i < battle.enemies.Length; i++)
            {
                var temp = SecondaryFunctions.WarriorToStatusString(battle.enemies[i], i == battle.selectedEnemy);
                select.AddOption(label: $"{i + 1} - {battle.enemies[i].name}", value: $"{i}", description: temp.Item2,
                    emote: new Emoji(temp.Item1));
            }

            select.IsDisabled = disableSelectEnemy || disableButtons;

            builder.WithSelectMenu(select);
        }

        return builder.Build();
    }

    public static MessageComponent CancelFindPvp(ulong userId)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "–û—Ç–º–µ–Ω–∞", customId: $"FindPvp_{userId}_CancelFind", style: ButtonStyle.Danger);

        return builder.Build();
    }

    public static MessageComponent MarketSortComponents(ulong userId, string interactionId)
    {
        var rarityOptions = new[]
        {
            "—Å–±—Ä–æ—Å",
            "–æ–±—ã—á–Ω–æ–µ",
            "–Ω–µ–æ–±—ã—á–Ω–æ–µ",
            "—Ä–µ–¥–∫–æ–µ",
            "—ç–ø–∏—á–µ—Å–∫–æ–µ",
            "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ",
        };

        var itemTypeOptions = new[]
        {
            "—Å–±—Ä–æ—Å",
            "—à–ª–µ–º",
            "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫",
            "–ø–µ—Ä—á–∞—Ç–∫–∏",
            "—à—Ç–∞–Ω—ã",
            "–æ—Ä—É–∂–∏–µ",
            "–∑–µ–ª—å—è"
        };

        var levelOptions = Enumerable.Range(1, 50)
            .GroupBy(x => (x - 1) / 5)
            .Select(g => new { range = $"{g.First()}-{g.Last()}" })
            .ToArray();


        var selectMenuLvl = new SelectMenuBuilder()
            .WithCustomId($"MarketSort_{userId}_byLvl")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(levelOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel($"–£—Ä–æ–≤–µ–Ω—å {x.range}").WithValue($"{x.range}")).ToList());

        var selectMenuRaty = new SelectMenuBuilder()
            .WithCustomId($"MarketSort_{userId}_byRaty")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(rarityOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());

        var selectMenuType = new SelectMenuBuilder()
            .WithCustomId($"MarketSort_{userId}_byType")
            .WithPlaceholder("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞")
            .WithOptions(itemTypeOptions.Select(x =>
                new SelectMenuOptionBuilder().WithLabel(x).WithValue($"{x}")).ToList());


        var builder = new ComponentBuilder()
            .WithButton(label: "‚Üê", customId: $"MarketSort_{userId}_prewPage", row: 0)
            .WithButton(label: "‚Üë", customId: $"MarketSort_{userId}_prewItem", row: 0)
            .WithButton(emote: Emoji.Parse(":shopping_cart:"), customId: $"MarketSort_{userId}_buyItem", row: 0)
            .WithButton(label: "‚Üì", customId: $"MarketSort_{userId}_nextItem", row: 0)
            .WithButton(label: "‚Üí", customId: $"MarketSort_{userId}_nextPage", row: 0)
            .WithSelectMenu(selectMenuLvl, row: 1)
            .WithSelectMenu(selectMenuRaty, row: 2)
            .WithSelectMenu(selectMenuType, row: 3)
            .WithButton(emote: Emoji.Parse(":repeat:"), customId: $"MarketSort_{userId}_reloadPage", row: 4)
            .WithButton(emote: Emoji.Parse("üîç"), customId: $"MarketSort_{userId}_search", row: 4, disabled: true)
            .WithButton(emote: Emote.Parse("<:silver:997889161484828826>"), label: "‚Üë",
                customId: $"MarketSort_{userId}_priceUp", row: 4)
            .WithButton(emote: Emote.Parse("<:silver:997889161484828826>"), label: "‚Üì",
                customId: $"MarketSort_{userId}_priceDown", row: 4)
            .WithButton(emote: Emoji.Parse(":tools:"), customId: $"MarketSort_{userId}_openSlotsSettings", row: 4);


        return builder.Build();
    }

    public static MessageComponent MarketSettingComponents(MarketSettings settings)
    {
        var builder = new ComponentBuilder()
            .WithButton(label: "‚Üë", customId: $"Market_{settings.userId}_prewItem", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(label: "‚Üì", customId: $"Market_{settings.userId}_nextItem", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":money_with_wings:"), customId: $"Market_{settings.userId}_editPrice",
                row: 0, disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":eye:"), customId: $"Market_{settings.userId}_editVisible", style:
                (settings.searchResults.Count == 0 ? ButtonStyle.Success :
                    settings.searchResults[settings.currentItemIndex].isVisible ? ButtonStyle.Success :
                    ButtonStyle.Danger)
                , row: 0, disabled: settings.searchResults.Count == 0)
            .WithButton(label: "–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏", customId: $"Market_{settings.userId}_Remove", row: 0,
                disabled: settings.searchResults.Count == 0)
            .WithButton(emote: Emoji.Parse(":repeat:"), customId: $"Market_{settings.userId}_reloadPage", row: 1)
            .WithButton(label: "–ù–∞–∑–∞–¥", customId: $"Market_{settings.userId}_goBack", row: 1);

        return builder.Build();
    }
}