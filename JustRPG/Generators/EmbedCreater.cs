using Discord;
using Discord.WebSocket;
using JustRPG.Models;
using JustRPG.Models.SubClasses;
using JustRPG.Services;
using JustRPG.Features;
using JustRPG.Models.Enums;

namespace JustRPG.Generators;

public class EmbedCreater
{
    public static Embed ErrorEmbed(string text)
    {
        var emb = new EmbedBuilder
        {
            Title = "üö´ –û—à–∏–±–∫–∞",
            Color = Color.Red,
            Description = text
        };
        return emb.Build();
    }

    public static Embed EmpEmbed(string text)
    {
        var emb = new EmbedBuilder
        {
            Description = text
        };
        return emb.Build();
    }

    public static Embed WarningEmbed(string text)
    {
        var emb = new EmbedBuilder
        {
            Title = "‚ö† –í–Ω–∏–º–∞–Ω–∏–µ",
            Color = Color.DarkOrange,
            Description = text
        };
        return emb.Build();
    }

    public static Embed SuccessEmbed(string text)
    {
        var emb = new EmbedBuilder
        {
            Title = "‚úÖ –£—Å–ø–µ—à–Ω–æ",
            Color = Color.Green,
            Description = text
        };
        return emb.Build();
    }

    public static async Task<Embed> UserProfile(User user, IUser member, DataBase dataBase)
    {
        var emb = new EmbedBuilder
        {
            Title = $"–ü—Ä–æ—Ñ–∏–ª—å {await user.GetFullName(member.Username, dataBase)}"
        };
        emb.AddField($"–£—Ä–æ–≤–µ–Ω—å", $"{user.lvl}", inline: true)
            .AddField("–û–ø—ã—Ç", $"{(int)user.exp}\\{(int)user.expToLvl}", inline: true)
            .AddField("–ë–∞–ª–∞–Ω—Å", $"{user.cash}", inline: true)
            .AddField("–û—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", $"{user.mmr}", inline: true)
            .AddField(name: "–°—Ç–∞—Ç—ã",
                value:
                $"<:health:997889169567260714> : {user.stats.hp} |  <:strength:997889205684420718> : {user.stats.damage} " +
                $"| <:armor:997889166673186987> : {user.stats.defence} \n<:dexterity:997889168216694854> : {user.stats.speed} " +
                $"| <:luck:997889165221957642> : {user.stats.luck}");
        return emb.Build();
    }

    public static async Task<Embed> UserEquipmentEmbed(User user, IUser member, DataBase dataBase)
    {
        var embed = new EmbedBuilder
        {
            Title = $"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ {await user.GetFullName(member.Username, dataBase)}"
        };
        UserEquipment equipment = await user.GetEquipmentAsItems(dataBase!);

        embed.AddField(equipment.helmet == null ? "–®–ª–µ–º" : $"–®–ª–µ–º - {equipment.helmet!.name}",
                equipment.helmet == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.helmet!.ToString(), true)
            .AddField(equipment.armor == null ? "–ù–∞–≥—Ä—É–¥–Ω–∏–∫" : $"–ù–∞–≥—Ä—É–¥–Ω–∏–∫ - {equipment.armor!.name}",
                equipment.armor == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.armor!.ToString(), true)
            .AddField(equipment.pants == null ? "–®—Ç–∞–Ω—ã" : $"–®—Ç–∞–Ω—ã - {equipment.pants!.name}",
                equipment.pants == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.pants!.ToString(), true)
            .AddField(equipment.shoes == null ? "–ë–æ—Ç–∏–Ω–∫–∏" : $"–ë–æ—Ç–∏–Ω–∫–∏ - {equipment.shoes!.name}",
                equipment.shoes == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.shoes!.ToString(), true)
            .AddField(equipment.gloves == null ? "–ü–µ—Ä—á–∞—Ç–∫–∏" : $"–ü–µ—Ä—á–∞—Ç–∫–∏ - {equipment.gloves!.name}",
                equipment.gloves == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.gloves!.ToString(), true)
            .AddField(equipment.weapon == null ? "–û—Ä—É–∂–∏–µ" : $"–û—Ä—É–∂–∏–µ - {equipment.weapon!.name}",
                equipment.weapon == null ? "–ù–µ –Ω–∞–¥–µ—Ç–æ" : equipment.weapon!.ToString(), true);

        return embed.Build();
    }

    public static Embed UpSkills()
    {
        var embed = new EmbedBuilder
        {
            Title = "–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤",
            Description = "–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n" +
                          "<:health:997889169567260714> - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ —Å—á—ë—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏\n" +
                          "<:armor:997889166673186987> - –ø—Ä–∏–Ω–∏–º–∞—é—Ç –Ω–∞ —Å–µ–±—è –≤–µ—Å—å —É—Ä–æ–Ω —Å –µ–≥–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º\n" +
                          "<:dexterity:997889168216694854> - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–∫–ª–æ–Ω–µ–Ω–∏—è\n" +
                          "<:luck:997889165221957642> - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç –∏ –º–æ–Ω–µ—Ç—ã\n"
        };
        return embed.Build();
    }

    public static async Task<Embed> UserInventory(IUser member, User user, Item?[] items, DataBase dataBase)
    {
        var emb = new EmbedBuilder { Title = $"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {await user.GetFullName(member.Username, dataBase)}" };
        foreach (var item in items)
        {
            if (item == null)
                emb.AddField("–ü—É—Å—Ç–æ", "–°–ª–æ—Ç –Ω–µ –∑–∞–Ω—è—Ç");
            else
                emb.AddField($"{item.lvl} | {item.name}", item.ToString());
        }

        return emb.Build();
    }

    public static Embed ItemInfo(Item item)
    {
        var emb = new EmbedBuilder { Title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + item.name }
            .AddField("–¢–∏–ø", item.type, inline: true)
            .AddField("–£—Ä–æ–≤–µ–Ω—å", item.lvl.ToString(), inline: true)
            .AddField("–†–µ–¥–∫–æ—Å—Ç—å", item.rarity, inline: true)
            .AddField("–û–ø–∏—Å–∞–Ω–∏–µ", item.description != "" ? item.description : "–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç", inline: true)
            .AddField("–°—Ç–∞—Ç—ã", item.ToString(), inline: true)
            .AddField("uid", $"`{item.id}`", inline: true);

        Color temp = item.rarity switch
        {
            Rarity.common => 0xffffff,
            Rarity.uncommon => 0x0033cc,
            Rarity.rare => 0x6600ff,
            Rarity.epic => 0xffcc00,
            Rarity.legendary => 0xcc0000,
            Rarity.impossible => 0x000000,
            Rarity.exotic => 0xcc0066,
            Rarity.prize => 0xcccc00,
            Rarity.eventt => 0x666600,
            _ => 0xffffff
        };

        emb.Color = temp;

        return emb.Build();
    }

    public static Embed WorkEmbed(List<Work> works, int exp, int cash)
    {
        Work work = works[Random.Shared.Next(0, works.Count)];

        EmbedBuilder embed = new EmbedBuilder
        {
            Title = work.title,
            Description = string.Format(work.description, exp, cash),
            ThumbnailUrl = work.url
        };

        return embed.Build();
    }


    public static Embed SelectAdventureEmbed()
    {
        EmbedBuilder embed = new EmbedBuilder
        {
            Title = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è",
            Description = "–ü–æ—Ö–æ–¥ - —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–∫–∞—á–∫–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤."
        };

        return embed.Build();
    }

    public static Embed BattleEmbed(Battle? battle, bool gameEnded = false)
    {
        Warrior selectedEnemy, currentWarrior;
        EmbedBuilder embed;
        var progressBar = SecondaryFunctions.ProgressBar;
        switch (battle!.type)
        {
            case BattleType.adventure or BattleType.dungeon:
                currentWarrior = battle.players[battle.currentUser];
                selectedEnemy = battle.enemies[battle.selectedEnemy];
                break;
            case BattleType.arena:
                currentWarrior = battle.players[battle.currentUser];
                selectedEnemy = battle.players[battle.currentUser == 1 ? 0 : 1];
                break;
            default:
                return ErrorEmbed("wha ?");
        }

        embed = new EmbedBuilder
        {
            Title =
                $"–ë–æ–π {battle.players[0].fullName} - {(battle.type is BattleType.arena ? battle.players[1] : selectedEnemy).fullName}",
            Description = battle.type == BattleType.arena ? $"–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç {currentWarrior.name}" : ""
        };


        embed.WithThumbnailUrl(battle.type is BattleType.adventure or BattleType.dungeon
            ? selectedEnemy.url
            : currentWarrior.url);

        if (!gameEnded)
        {
            embed.AddField($"{currentWarrior.fullName} - {currentWarrior.lvl}",
                $"<:health:997889169567260714> - {progressBar(currentWarrior.stats.hp, currentWarrior.stats.MaxHP)}\n " +
                $"<:armor:997889166673186987> - {progressBar(currentWarrior.stats.defence, currentWarrior.stats.MaxDef)}\n" +
                $"<:strength:997764094125953054> - {currentWarrior.stats.damage}");

            embed.AddField($"{selectedEnemy.fullName} - {selectedEnemy.lvl}",
                $"<:health:997889169567260714> - {progressBar(selectedEnemy.stats.hp, selectedEnemy.stats.MaxHP)}\n " +
                $"<:armor:997889166673186987> - {progressBar(selectedEnemy.stats.defence, selectedEnemy.stats.MaxDef)}\n" +
                $"<:strength:997764094125953054> - {selectedEnemy.stats.damage}");
        }

        if (battle.log != "")
            embed.AddField("–õ–æ–≥–∏", $"```{battle.log}```");

        return embed.Build();
    }

    public static Embed FindPvp(FindPVP pvp, long count = -1)
    {
        EmbedBuilder embed = new EmbedBuilder
        {
            Title = $"–ü–æ–∏—Å–∫ –±–∏—Ç–≤—ã",
            Description = "–ß–µ–º –¥–æ–ª—å—à–µ –≤—ã –∂–¥—ë—Ç–µ –±–∏—Ç–≤—É —Ç–µ–º –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª–∞–±—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å—Å—è"
        };
        embed.AddField("–í–∞—à mmr", $"```{pvp.mmr}```", inline: true);
        embed.AddField("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞", $"<t:{pvp.stratTime}:R>", inline: true);
        if (count != -1)
            embed.AddField("–ò–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –µ–≥–æ –Ω–∞—á–∞–ª–∞", $"```{count}```");


        return embed.Build();
    }

    public static Embed MarketPage(MarketSearchState searchState)
    {
        var emb = new EmbedBuilder { Title = "–ú–∞—Ä–∫–µ—Ç" };
        List<SaleItem> items = searchState.GetItemsOnPage(searchState.currentPage);
        for (int i = 0; i < 5; i++)
        {
            if (i >= items.Count)
                emb.AddField("-", "-");
            else
                emb.AddField(
                    (searchState.currentItemIndex == i ? "üí† " : "") +
                    $"{items[i].itemName} | {items[i].price}<:silver:997889161484828826>", items[i].itemDescription);
        }

        return emb.Build();
    }

    public static Embed MarketSettingsPage(MarketSlotsSettings searchState)
    {
        List<SaleItem> items = searchState.searchResults;
        var emb = new EmbedBuilder
        {
            Title = "–ù–∞—Å—Ç—Ä–æ–∫–π–∏ —Ç–æ–≤–∞—Ä–æ–≤",
            Description = (items.Count == 0 ? "–í—ã –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É" : null)
        };

        if (searchState.currentItemIndex > searchState.searchResults.Count - 1)
            searchState.currentItemIndex = 0;

        if (items.Count == 0)
            return emb.Build();

        for (int i = 0; i < 5; i++)
        {
            if (i < items.Count)
                emb.AddField(
                    (searchState.currentItemIndex == i ? "üí† " : "") +
                    $"{items[i].itemName} | {items[i].price}<:silver:997889161484828826>",
                    items[i].itemDescription);
        }

        return emb.Build();
    }

    public static Embed GuildEmbed(Guild guild)
    {
        var builder = new EmbedBuilder()
            .WithTitle($"–ì–∏–ª—å–¥–∏—è {guild.symbol} [{guild.tag}] {guild.name}")
            .WithThumbnailUrl(guild.logo)
            .AddField("–ì–ª–∞–≤–∞", $"<@{guild.members.First(x => x.rank == GuildRank.owner).user}>", inline: true)
            .AddField("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", $"{guild.members.Count}/30", inline: true)
            .AddField("–¢–µ–≥", guild.tag, inline: true);

        if (guild.premium)
            builder.AddField("–ó–Ω–∞—á–æ–∫", guild.symbol ?? "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", inline: true);

        string inviteType = guild.join_type switch
        {
            JoinType.open => "–û—Ç–∫—Ä—ã—Ç—ã–π",
            JoinType.invite => "–ß–µ—Ä–µ–∑ –∑–∞—è–≤–∫—É",
            _ => "–ó–∞–∫—Ä—ã—Ç"
        };

        builder.AddField("–¢–∏–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", inviteType, inline: true);

        return builder.Build();
    }

    public static async Task<Embed> GuildMembers(Guild guild, DiscordSocketClient client)
    {
        var emb = new EmbedBuilder
        {
            Title = $"–£—á–∞—Å—Ç–Ω–∏–∫–∏ {guild.name}"
        };
        foreach (var member in guild.members)
        {
            string rank = member.rank switch
            {
                GuildRank.owner => "–≥–ª–∞–≤–∞",
                GuildRank.officer => "–æ—Ñ—Ñ–∏—Ü–µ—Ä",
                _ => "–£—á–∞—Å—Ç–Ω–∏–∫"
            };
            var userName = await SecondaryFunctions.GetUserName(member.user, client);

            emb.AddField(userName, $"–ó–≤–∞–Ω–∏–µ - `{rank}`");
        }

        return emb.Build();
    }

    public static async Task<Embed> GuildApplications(Guild guild, DiscordSocketClient client)
    {
        List<long> users = guild.wantJoin.Where((x, y) => y <= 25).ToList();
        var emb = new EmbedBuilder
        {
            Title = "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        };

        if (users.Count == 0)
            emb.Description = "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç";

        foreach (var user in users)
        {
            emb.AddField(await SecondaryFunctions.GetUserName(user, client), $"id - `{user}`");
        }

        if (guild.wantJoin.Count > 25)
            emb.Description = $"–û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 25 –∑–∞—è–≤–æ–∫, —Å–∫—Ä—ã—Ç–æ {users.Count - 25}";

        return emb.Build();
    }

    public static Embed GuildSettings(Guild guild)
    {
        var emb = new EmbedBuilder
        {
            Title = $"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ª—å–¥–∏–∏ {guild.name}"
        };

        emb.WithThumbnailUrl(guild.logo)
            .AddField("–¢–µ–≥", guild.tag)
            .AddField("–ù–∞–∑–≤–∞–Ω–∏–µ", guild.name)
            .AddField("–¢–∏–ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", guild.join_type switch
            {
                JoinType.open => "–û—Ç–∫—Ä—ã—Ç—ã–π",
                JoinType.invite => "–ß–µ—Ä–µ–∑ –∑–∞—è–≤–∫—É",
                _ => "–ó–∞–∫—Ä—ã—Ç"
            })
            .AddField("–ì–ª–∞–≤–∞", $"<@{guild.members.First(x => x.rank == GuildRank.owner).user}>")
            .AddField("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", $"{guild.members.Count}/30")
            .AddField("–ü—Ä–µ–º–∏—É–º", guild.premium ? "–ï—Å—Ç—å" : "–û—Ç—Å—É—Ç–≤—É–µ—Ç")
            .AddField("–ó–Ω–∞—á–æ–∫", guild.symbol == "" ? "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : guild.symbol);
        
        
        return emb.Build();
    }
}